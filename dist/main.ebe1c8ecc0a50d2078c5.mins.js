(()=>{"use strict";const t=(...t)=>t.map((t=>Number(t))),e=(...t)=>t.every((t=>"number"==typeof t&&!isNaN(t)));const r=class{constructor(){this.priceInput=document.querySelector("#product-price"),this.quantityInput=document.querySelector("#product-quantity"),this.shippingInput=document.querySelector("#product-shipping"),this.resultBox=document.querySelector("#result"),this.totalBtn=document.querySelector("#total-btn")}getInputs(){return[this.priceInput.value,this.quantityInput.value,this.shippingInput.value]}setPrice(t){this.resultBox.innerText=t}onClick(t){this.totalBtn.addEventListener("click",t)}};const s=class{constructor(){this.errorBox=document.querySelector("#error")}hideError=()=>{this.errorBox.classList.add("invisible")};showError=()=>{this.errorBox.classList.remove("invisible")};showErrorMessage=(t,r)=>{const s=t.reduce(((t,s,o)=>(e(r[o])?t+="":t+=`${s} is not a number`,t)),"");this.errorBox.innerText=s,this.showError()}};(()=>{const o=new r,i=new s;i.hideError();o.onClick((()=>{const r=o.getInputs(),s=t(...r);if(e(...s)){const[t,e,r]=s,i=t+e+r;o.setPrice(i)}else i.showErrorMessage(r,s)}))})(),console.log("test")})();